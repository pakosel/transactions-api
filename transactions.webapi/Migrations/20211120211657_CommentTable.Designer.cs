// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using transactions_api.Models;

namespace transactions_api.Migrations
{
    [DbContext(typeof(MyWebApiContext))]
    [Migration("20211120211657_CommentTable")]
    partial class CommentTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("transactions_api.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("transactions_api.Models.Profit", b =>
                {
                    b.Property<int>("ProfitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AmountCurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BuyRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BuyTransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("QtySold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SellTransactionId")
                        .HasColumnType("int");

                    b.HasKey("ProfitId");

                    b.HasIndex("BuyTransactionId");

                    b.HasIndex("SellTransactionId");

                    b.ToTable("Profit");
                });

            modelBuilder.Entity("transactions_api.Models.StocksLeft", b =>
                {
                    b.Property<int>("StocksLeftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("StocksLeftId");

                    b.HasIndex("TransactionId");

                    b.ToTable("StocksLeft");
                });

            modelBuilder.Entity("transactions_api.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AmountCurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Commision")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceCurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Stock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("transactions_api.Models.Comment", b =>
                {
                    b.HasOne("transactions_api.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");
                });

            modelBuilder.Entity("transactions_api.Models.Profit", b =>
                {
                    b.HasOne("transactions_api.Models.Transaction", "Buy")
                        .WithMany()
                        .HasForeignKey("BuyTransactionId");

                    b.HasOne("transactions_api.Models.Transaction", "Sell")
                        .WithMany()
                        .HasForeignKey("SellTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("transactions_api.Models.StocksLeft", b =>
                {
                    b.HasOne("transactions_api.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
